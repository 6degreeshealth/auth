###########################################
#     Email Server Configuration
###########################################
authServerListenPort=121

###########################################
#     Email Server Configuration
###########################################
smtpServer="smtpServer.example.com"
smtpPort=587
smtpFromEmail="email@example.com"
smtpPassword="password"
emailFromDisplayName="Example Notifications"

###########################################
#     Email template configuration
###########################################
company=Example
verifyEmailTemplate="testTemplates/verifyEmail.html"
verifyEmailSubject="Complete your $company sign up"
welcomeTemplate="testTemplates/welcomeEmail.html"
welcomeSubject="Welcome to $company"
newLoginTemplate="testTemplates/newLogin.html"
newLoginSubject="$company login alert for <BROWSER> on <OS>"
lockedOutTemplate="testTemplates/lockedOut.html"
lockedOutSubject="$company account locked"
emailChangedTemplate="testTemplates/emailChanged.html"
emailChangedSubject="$company email changed"
passwordChangedTemplate="testTemplates/passwordChanged.html"
passwordChangedSubject="$company password changed"

###########################################
#     Cookie MAC Key
###########################################
cookieBase64Key='AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYmKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4_QA==' 

###########################################
#     Database Backend Configuration
###########################################
backendType="Postgres"
backendServer="localhost"
backendPort=5432
backendUser=postgres
backendDatabase=postgres
backendPassword='mysecretpassword'

###########################################
#      Redis Backend Config  
###########################################
redisServer="localhost"
redisPort=6379
redisPassword=""
redisMaxIdle=80
redisMaxConnections=12000

###########################################
#     Database Queries 
###########################################
getUserLoginQuery="select userId, loginProvider, providerKey, twoFactorEnabled, lockoutEndDateUtc, lockoutEnabled, accessfailedcount
  from sharedpeople p
  inner join shareduserlogins l on l.userid = p.id
  where p.email = $1 and l.loginProvider = $2 and p.isdeleted = 'false'"
getSessionQuery="select loginId, sessionhash, userid, renewtimeutc, expiretimeutc from shareduserloginsessions where sessionhash = $1"
renewSessionQuery=""
renewSessionUsingRememberMeQuery=""
getRememberMeQuery=""
renewRememberMeQuery=""
addUserQuery="Insert into SharedUserLogins(UserId, LoginProvider, ProviderKey)
  Values (?, ?, ?)"
verifyEmailQuery="Update SharedUsers
  set EmailConfirmed = 1
  where Email = ?"
updateUserQuery=""
createProfileAndInvalidateSessionsQuery=""
updateEmailAndInvalidateSessionsQuery=""
updatePasswordAndInvalidateSessionsQuery="Update SharedUserLogins
  set ProviderKey = ? 
  where Email = ? and LoginProvider = 'Default'`
  const createUser string = `Insert into SharedUsers (FirstName, LastName, Email, DayOfWeekStart, LastUpdatedDate)
  Values (?, ?, ?, ?, GetUtcDate());
  select @@Identity"
invalidateUserSessionsQuery=""

loginFailed="Update SharedUserLogins
  set AccessFailedCount = AccessFailedCount + 1,
  LockoutEnabled = Case when AccessFailedCount > 5 then 1 else 0 end,
  LockoutEndDateUtc = 
    Case when LockoutEnabled = 1 and LockoutEndDateUtc is null then DateAdd(hh, 30, GetUtcDate())
	when LockoutEnabled = 0 then null
	else LockoutEndDateUtc end
  where UserId = ? and LoginProvider = 'Default'"
loginSuccess="Update SharedUserLogins
  set AccessFailedCount = 0,
  LockoutEnabled = 0,
  LockoutEndDateUtc = null,
  LastLoginDateUtc = GetUtcDate()
  where UserId = ? and LoginProvider = 'Default'"